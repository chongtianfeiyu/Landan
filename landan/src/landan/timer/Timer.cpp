//////////////////////////////////////////////////////////////////////
// INCLUDES //////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

#include "Timer.h"

#ifdef _WIN32
	#include <Windows.h>
#endif

#include <landan/util/DebugUtil.h>

//////////////////////////////////////////////////////////////////////
// NAMESPACE /////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

namespace landan {

	//////////////////////////////////////////////////////////////////////
	// STATICS ///////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////

	f64 Timer::RCP_FREQUENCY_SECONDS = 0.0;
	f64 Timer::RCP_FREQUENCY_MILLISECONDS = 0.0;
	f64 Timer::RCP_FREQUENCY_MICROSECONDS = 0.0;

#ifdef _WIN32
	void Timer::Init()
	{
		LARGE_INTEGER li;
		if (!QueryPerformanceFrequency(&li))
		{
			LOG_ERROR("Unable to Query Performance Frequency");
		}
		else
		{
			f64 denom = static_cast<f64>(li.QuadPart);
			Timer::RCP_FREQUENCY_SECONDS = 1.0/denom;
			Timer::RCP_FREQUENCY_MILLISECONDS = 1.0/denom*1000.0;
			Timer::RCP_FREQUENCY_MICROSECONDS = 1.0/denom*1000000.0;
		}
	}

	f64 Timer::GetSeconds()
	{
		LARGE_INTEGER li;
		QueryPerformanceCounter(&li);
		return static_cast<f64>(li.QuadPart)*Timer::RCP_FREQUENCY_SECONDS;
	}

	f64 Timer::GetMilliSeconds()
	{
		LARGE_INTEGER li;
		QueryPerformanceCounter(&li);
		return static_cast<f64>(li.QuadPart)*Timer::RCP_FREQUENCY_MILLISECONDS;
	}

	f64 Timer::GetMicroSeconds()
	{
		LARGE_INTEGER li;
		QueryPerformanceCounter(&li);
		return static_cast<f64>(li.QuadPart)*Timer::RCP_FREQUENCY_MICROSECONDS;
	}
#else
	void Timer::Init()
	{
		//TODO: Implement for other platforms
	}

	f64 Timer::GetSeconds()
	{
		//TODO: Implement for other platforms
		return 0.0;
	}

	f64 Timer::GetMilliSeconds()
	{
		//TODO: Implement for other platforms
		return 0.0;
	}

	f64 Timer::GetMicroSeconds()
	{
		//TODO: Implement for other platforms
		return 0.0;
	}
#endif

	//////////////////////////////////////////////////////////////////////
	// CONSTRUCTORS //////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////

	Timer::Timer() {

	}

	//////////////////////////////////////////////////////////////////////
	// DESTRUCTOR ////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////

	Timer::~Timer() {

	}

	//////////////////////////////////////////////////////////////////////
	// INITIALIZE ////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////


	//////////////////////////////////////////////////////////////////////
	// DESTROY ///////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////


	//////////////////////////////////////////////////////////////////////
	// BODY //////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////


	//////////////////////////////////////////////////////////////////////
	// GETTERS/SETTERS ///////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////

}