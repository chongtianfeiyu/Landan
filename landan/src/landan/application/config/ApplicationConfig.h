/*********************************
*Class: CLASSNAME
*Description:
*Author: jkeon
**********************************/

#ifndef _APPLICATIONCONFIG_H_
#define _APPLICATIONCONFIG_H_


//////////////////////////////////////////////////////////////////////
// INCLUDES //////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

#include <landan/core/LandanTypes.h>

//////////////////////////////////////////////////////////////////////
// NAMESPACE /////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

namespace landan {

	//////////////////////////////////////////////////////////////////////
	// ENUMS /////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////

	namespace application
	{
		enum APPLICATION_TYPE
		{
			BASIC = 0,
			WINDOWED = 1
		};

		enum UPDATE_TYPE
		{
			RUN_ONCE = 0,
			FRAMERATE_LIMITED = 1,
			FRAMERATE_UNLIMITED = 2
		};

		enum RENDER_TYPE
		{
			NONE = 0,
			HARDWARE_DIRECT_X_11 = 1
		};
	}

	//////////////////////////////////////////////////////////////////////
	// GLOBALS ///////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////


	//////////////////////////////////////////////////////////////////////
	// CLASS DECLARATION /////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////

	class ApplicationConfig {

	//PUBLIC FUNCTIONS
	public:
		ApplicationConfig();
		virtual ~ApplicationConfig();

		application::APPLICATION_TYPE GetApplicationType();
		void SetApplicationType(application::APPLICATION_TYPE applicationType);

		application::UPDATE_TYPE GetUpdateType();
		void SetUpdateType(application::UPDATE_TYPE updateType);

		application::RENDER_TYPE GetRenderType();
		void SetRenderType(application::RENDER_TYPE renderType);

		f32 GetFrameRate();
		void SetFrameRate(f32 frameRate);


	//PRIVATE FUNCTIONS
	private:
		ApplicationConfig(const ApplicationConfig &other);
		ApplicationConfig& operator = (const ApplicationConfig &other);

	//PRIVATE VARIABLES
	private:
		application::APPLICATION_TYPE m_applicationType;
		application::UPDATE_TYPE m_updateType;
		application::RENDER_TYPE m_renderType;
		f32 m_frameRate;
	
	};

	//////////////////////////////////////////////////////////////////////
	// STATICS ///////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////


}
#endif